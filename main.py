from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import random

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# Token du bot (fourni par l'utilisateur)
BOT_TOKEN = "8198861847:AAEbdLQVw7QsikLgoxsoGRAJdGIiXGSUlDg"

# Date et heure de l'√©preuve de Bac de Fran√ßais : 13 juin 2025 √† 9h (heure de Paris)
BAC_DATETIME = datetime(2025, 6, 13, 9, 0, 0, tzinfo=ZoneInfo("Europe/Paris"))

# Astuces / r√©f√©rences courtes pour motiver et rappeler le programme
BAC_TIPS = [
    "La m√©taphore, c'est comme un airdrop : tu re√ßois une image sans pr√©venir, mais elle te donne de la valeur.",
    "L'hyperbole, c'est le pump d'un shitcoin : √ßa exag√®re grave pour faire r√™ver.",
    "La m√©tonymie, c'est comme dire \"le wallet\" pour \"le trader\" : on remplace le contenant par le contenu.",
    "L'oxymore, c'est le \"rug-pull s√©curis√©\" de la litt√©rature : deux mots oppos√©s dans le m√™me smart contract.",
    "L'all√©gorie, c'est une roadmap artistique : un r√©cit concret pour parler d'id√©es abstraites.",
    "Le classicisme, c'est la layer 1 du bon go√ªt : ordre, r√®gles, clart√©.",
    "Le romantisme, c'est le bull run des √©motions : passion, nature, d√©passement.",
    "Le r√©alisme, c'est l'audit d'un projet DeFi : on regarde la r√©alit√© en face, sans embellir.",
    "Le symbolisme, c'est comme les NFT PFP : chaque d√©tail cache un sens plus profond.",
    "Le surr√©alisme, c'est du yield farming mental : on explore l'irrationnel pour en tirer du sens.",
    "L'introduction, c'est ton whitepaper : elle doit poser le cadre et convaincre vite.",
    "La probl√©matique, c'est le smart contract de ta r√©flexion : elle structure tout le reste.",
    "Chaque partie, c'est un staking pool : tu y d√©poses tes arguments et tu r√©coltes des points.",
    "La transition, c'est ton bridge entre deux blockchains d'id√©es.",
    "La conclusion, c'est ton claim final : tu retires ton rendement intellectuel.",
    "Lire un texte, c'est comme faire un DYOR (Do Your Own Research) : faut scanner les lignes et pas se faire rug.",
    "Un champ lexical, c'est le tokenomics d'un passage : √ßa te dit o√π le texte veut aller.",
    "Le narrateur, c'est le dev anonyme : il peut manipuler sans qu'on le voie.",
    "Le rythme des phrases, c'est la volatilit√© du march√© : parfois calme, parfois fr√©n√©tique.",
    "Un changement de registre, c'est un flip de narrative : le FUD devient FOMO.",
    "√Ä l'oral, sois comme un bon shiller : clair, fluide, et avec des punchlines.",
    "Si t'es bloqu√©, fais comme dans un bear market : reste calme et recentre-toi sur les fondamentaux.",
    "Ta voix, c'est ton whitepaper vocal : inspire confiance pour donner envie d'investir dans ton discours.",
    "La question de grammaire, c'est l'analyse technique : faut √™tre rigoureux et pr√©cis.",
    "La lecture expressive, c'est ton graphique anim√© : elle rend la structure visible.",
]


def format_time_delta(delta: timedelta) -> str:
    """Formate un objet timedelta en cha√Æne lisible indiquant j/h/m/s."""
    total_seconds = int(delta.total_seconds())
    if total_seconds < 0:
        return "L'√©preuve a d√©j√† commenc√© ! üéâ"

    days = total_seconds // 86_400
    hours = (total_seconds % 86_400) // 3_600
    minutes = (total_seconds % 3_600) // 60
    seconds = total_seconds % 60

    parts = []
    if days:
        parts.append(f"{days} jour{'s' if days > 1 else ''}")
    if hours or parts:
        parts.append(f"{hours} heure{'s' if hours > 1 else ''}")
    if minutes or parts:
        parts.append(f"{minutes} minute{'s' if minutes > 1 else ''}")
    parts.append(f"{seconds} seconde{'s' if seconds > 1 else ''}")

    return ", ".join(parts)


async def bac_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """R√©pond au /bac avec le compte √† rebours avant l'√©preuve."""
    now = datetime.now(ZoneInfo("Europe/Paris"))
    delta = BAC_DATETIME - now
    countdown_text = format_time_delta(delta)
    tip = random.choice(BAC_TIPS)
    await update.message.reply_text(
        (
            f"‚è≥ Il reste {countdown_text} avant l'√©preuve de Bac de Fran√ßais üìö\n\n"
            f"üí° {tip}\n\n"
            f"Bon courage @mkyDnys !"
        )
    )


async def revise_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Rappelle √† l'utilisateur @mkyDnys de r√©viser."""
    await update.message.reply_text(
        "üìö Hey @mkyDnys, n'oublie pas de r√©viser pour le Bac de Fran√ßais ! üí™"
    )


# --- R√©ponse automatique quand le bot est mentionn√© ---


async def mention_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """R√©pond lorsqu'on @mentionne le bot dans n'importe quel chat."""
    message = update.message
    if message is None:
        return

    bot_username = (context.bot.username or "").lower()

    # V√©rifie si le message contient une mention directe du bot (@BotUsername)
    for entity in message.entities or []:
        if entity.type == "mention":  # type: ignore[attr-defined]
            mentioned_text = message.text[entity.offset : entity.offset + entity.length]
            if mentioned_text.lower() == f"@{bot_username}":
                # M√™me r√©ponse que la commande /bac
                now = datetime.now(ZoneInfo("Europe/Paris"))
                delta = BAC_DATETIME - now
                countdown_text = format_time_delta(delta)
                tip = random.choice(BAC_TIPS)
                await message.reply_text(
                    (
                        f"‚è≥ Il reste {countdown_text} avant l'√©preuve de Bac de Fran√ßais üìö\n\n"
                        f"üí° {tip}\n\n"
                        f"Bon courage @mkyDnys !"
                    )
                )
                break


def main() -> None:
    """Lance le bot en mode polling."""
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("bac", bac_command))
    application.add_handler(CommandHandler("revise", revise_command))

    # Handler pour les @mentions
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, mention_handler))

    # D√©marrage du bot
    print("Bot lanc√©. Appuyez sur Ctrl+C pour arr√™ter.")
    application.run_polling()


if __name__ == "__main__":
    main() 
